#!/usr/bin/env python
import argparse, math, numpy
from ss_plotting import make_plots
from compute_expected_value import compute_expected_value

def compute_actuals(arms, num_trials, max_selected_arms = 1):
    num_arms = len(arms)

    actual_values = numpy.zeros(max_selected_arms)
    for num_selected in range(max_selected_arms):

        total_value = 0
        for trial in range(num_trials):
            # Compute random permultation of trajectory list
            sorted_arms = numpy.random.permutation(arms)
            
            # Selected the first k
            selected_arms = sorted_arms[:num_selected+1]

            # Compute the value as the max
            total_value += max(selected_arms)

        actual_values[num_selected] = total_value / num_trials

    return actual_values


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description="Run a trial")

    parser.add_argument("--num-arms", required=True, type=int,
                        help="The number of arms to select from")     
    parser.add_argument("--num-trials", type=int, default=100,
                        help="The number of trials to execute and average for computing actual value")
    parser.add_argument("--max-selected", type=int, default=None,
                        help="The max number of selected arms to consider")
    parser.add_argument("--arm-dists", choices=["uniform", "skew-high", "skew-low"],
                        nargs='+', default = ['uniform'], 
                        help="The type of underlying distribution")
    parser.add_argument("--save-plots", action="store_true",
                        help="Save the plots generated by the script")
    args = parser.parse_args()

    num_arms = args.num_arms
    colors = ['blue', 'green', 'red', 'black', 'orange', 'pink']

    max_selected_arms = args.max_selected
    if max_selected_arms is None:
        max_selected_arms = num_arms

    # Randomly sample a set of arms
    all_data = []
    all_labels = []
    all_colors = []
    all_color_emphasis = []
    for aidx in range(len(args.arm_dists)):

        arm_dist = args.arm_dists[aidx]
        if arm_dist == 'uniform':
            arms = numpy.random.uniform(0.0, 1.0, num_arms)
        elif arm_dist == 'skew-low':
            arms = numpy.random.normal(0.1, 0.4, num_arms)
        else:
            arms = numpy.random.normal(0.9, 0.4, num_arms)
        arms[arms > 1.0] = 1.0
        arms[arms < 0.0] = 0.0

        # First compute the expected value for this dataset
        expected_vals = compute_expected_value(arms, max_selected_arms = max_selected_arms)
        xvals = range(1, max_selected_arms+1)
        
        # Now compute the actual value 
        actual_vals = compute_actuals(arms, args.num_trials, 
                                      max_selected_arms = max_selected_arms)
        
        bin_size = 0.1
        hist_data, bin_edges = numpy.histogram(arms, bins=numpy.arange(0.0, 1.05, bin_size))
        savefile = None
        if args.save_plots:
            savefile = 'histogram_%s.png' % arm_dist

        make_plots.plot_bar_graph([hist_data], [colors[aidx]], 
                                  group_color_emphasis = [True],
                                  group_labels = None,
                                  plot_ylabel = 'Counts',
                                  plot_xlabel = 'Success Probability',
                                  bin_labels = bin_edges + 0.5*bin_size,
                                  savefile = savefile,
                                  savefile_size = (.5*4.75, .5*.5*4.75))

        # Add expected value data
        all_data.append((xvals, expected_vals))
        all_labels.append('Expected - %s' % arm_dist)
        all_colors.append(colors[aidx])
#        all_color_emphasis.append(False)
        all_color_emphasis.append(True)

        # Add actual value data
#        all_data.append((xvals, actual_vals))
#        all_labels.append('Actual - %s' % arm_dist)
#        all_colors.append(colors[aidx])
#        all_color_emphasis.append(True)

    savefile = 'comparison.png' if args.save_plots else None
    make_plots.plot(all_data, all_colors,
                    group_color_emphasis = all_color_emphasis,
                    group_labels = all_labels,
                    plot_xlabel = 'Num selected arms',
                    plot_ylabel = 'Success probability',
                    fontsize=8, legend_fontsize=8,
                    savefile = savefile,
                    savefile_size = (.5*4.75, 1.5*.5*4.75))
